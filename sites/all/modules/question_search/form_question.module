<?php

/**
 * Supplies permissions that the module defines, 
 * so that they can be selected on the user permissions 
 * page and used to grant or restrict access to actions the 
 * module performs
 */
function form_question_permission() {
	return array(
		'submit form_question' => array(
			'title' => t('Submit form_question'),
			'description' => t('Submit the form_question form'),
			),
		);
}

/**
 * Registers paths for the module ot define how URL paths are handled
 */
function form_question_menu() {
  $items = array();
  // defines the path 'form-question' and what should be displayed at the URL
  // localhost:8888/form-question 
  $items['form-question'] = array(
    'title' => 'Question Upload',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('submit form_question'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_question_form'),
  );
  return $items;
}

/**
 * Helper function to query articles from mysql and return a sorted array
 * of all subjects of submitted questions
 */
function get_subjects() {
	$results = db_query("SELECT * FROM {node} WHERE type='article'");
	$subjects = array();
	if (!empty($results)) {
		$subjects[] = t('');
		foreach($results AS $result) {
			if (!in_array(ucwords(strtolower(t($result->title))),$subjects)) {
				$subjects[] = ucwords(strtolower(t($result->title)));
			}	
		}
		sort($subjects);
	}
	return $subjects;
}

/**
 * Helper function to remove upload button for uploading images
 * so that images are automatically uploaded when chosen 
 */
function remove_upload_button($image, &$form_state, $form) {
	$image = file_managed_file_process($image, $form_state, $form);
  $image['upload_button']['#access'] = FALSE;
  return $image;
}

/**
 * Sets what inputs and buttons will be on the form
 */
function form_question_form($form, &$form_state) {
	// defines a select button for the form, it can be referenced in 
	// form_question_form_submit($form, &$form_state) with 
	// $form_state['values']['select_subject']
	$form['select_subject'] = array(
		'#type' => 'select',
		'#title' => t('Select a Subject'),
		'#options' => get_subjects(),
		'#description' => t('A subject must be selected here or input below. Please only use one.')
		);

	$form['subject'] = array(
		'#type' => 'textfield',
		'#title' => t('Subject'),
		'#size' => 30,
		'#maxlength' => 40,
		'#required' => FALSE,
		'#description' => t('Only use if your subject is not in the selection above.'),
		);

	$form['tags'] = array(
		'#type' => 'textfield',
		'#title' => t('Tags'),
		'#size' => 60,
		'#maxlength' => 128,
		'#required' => FALSE,
		'#description' => t('Input tags that can be used to find this question.'),
		);

	$form['question'] = array(
		'#title' => t('Math Question'),
		'#type' => 'textarea',
		'#description' => t('Input math question or upload file below.'),
		'#default_value' => '',
		'#required' => FALSE,
		);

	$form['file_upload'] = array(
		'#title' => t('Upload File'),
		'#type' => 'managed_file',
		'#process' => array('remove_upload_button')
		);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add Question'),
		);

	return $form;
}

/**
 * If false is returned, error will return on the page
 * indicating fields that need to be filled in so that
 * a question submission can be completed
 * If true is returned, the question is submitted as 
 * normal
 */
function form_question_form_validate($form, &$form_state) {
	$valid = TRUE;
	if (($form_state['values']['select_subject'] == 0) && (empty($form_state['values']['subject']))) {
		form_set_error('subject', t('You must select or enter a subject'));
  	$valid = FALSE;
  }
  if (empty($form_state['values']['question']) && (empty($form_state['values']['file_upload']))) {
  	form_set_error('question', t('You must enter or upload a question'));
  	$valid = FALSE;
	}
	return $valid;
}

/**
 * Creates an article from the values that were
 * input into the form before the submit button was pressed
 */
function form_question_form_submit($form, &$form_state) {
  $body_text = $form_state['values']['question'];
  $node = new stdClass();
  $node->type = 'article';
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;

  // formatting subject so that first letter of each word is UC and rest is LC
  if (!empty($form_state['values']['subject'])) {
  	$node->title = ucwords(strtolower($form_state['values']['subject']));
  } else {
  	$node->title = get_subjects()[$form_state['values']['select_subject']];
  }

  // won't set tags if none were input, otherwise create term for tags
  if (!empty($form_state['values']['tags'])) {
 	  $new_term = array(
 	    'vid' => 1,
  	  'name' => $form_state['values']['tags'],
		);
		$new_term = (object) $new_term;
		taxonomy_term_save($new_term);

  	$node->field_tags[$node->language][0]['tid'] = $new_term->tid;
	}

  $node->body[$node->language][0]['value']   = $body_text;
  $node->body[$node->language][0]['summary'] = text_summary($body_text);
  $node->body[$node->language][0]['format']  = 'filtered_html';
    
  $path = 'content/' .$form_state['values']['subject'] . date('YmdHis');
  $node->path = array('alias' => $path);

  // uploading image file
  if (!empty($form_state['values']['file_upload'])) {
  	$filepath = drupal_realpath($form_state['values']['file_upload']);
    $file = file_load($form_state['values']['file_upload']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    $node->field_image[LANGUAGE_NONE][0] = (array)$file;
  }
  $title = $node->title;
  
  // field_search_title used so that the both the title search facet will have
  // both words and the title can be searched on
  $node->field_search_title[LANGUAGE_NONE][0]['value'] = $title;
  node_save($node);

  // returning confirmation message for uploaded question
 	drupal_set_message(t("Your form entry has been added with a subject of '@subject', 
 		tags of '@tags', and with the question as '@question'.", array(
		'@subject' => $title,
		'@tags' => $form_state['values']['tags'],
		'@question' => $form_state['values']['question'],
	)));
}